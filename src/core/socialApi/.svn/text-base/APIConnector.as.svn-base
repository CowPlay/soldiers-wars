package Api
{
import Api.Info.ApiUserInfo;

import com.demonsters.debugger.MonsterDebugger;

import flash.display.DisplayObject;
import flash.events.EventDispatcher;

/**
 * ...
 * @author me
 */
public class APIConnector
{
    private var _connector:IMediator;
    private static var _network:String;

    private static var instance:APIConnector;

    private var _disptacher:EventDispatcher;

    public static var isNetwork:Boolean;
    public static var isOffline:Boolean;

    public static const NETWORK_OK:String = "ok";
    public static const NETWORK_VK:String = "vk";
    public static const NETWORK_MM:String = "mm";
    public static const NETWORK_FB:String = "fb";

    private const DEFAULT_NETWORK:String = NETWORK_VK;

    private var _initCallback:Function;

    public function APIConnector()
    {

    }

    public static function getInstance():APIConnector
    {
        return instance ? instance : instance = new APIConnector();
    }

    public function init(stage:DisplayObject, onComplete:Function = null):Boolean
    {
        var flashVars:Object = stage.loaderInfo.parameters;

        MonsterDebugger.trace(this, flashVars);

        _disptacher = new EventDispatcher();

        _initCallback = onComplete;

        if (flashVars.viewer_id)
        {
            _network = NETWORK_VK;
            isOffline = false;
            isNetwork = true;
            _connector = new VKMediator();
            _connector.init(stage, onComplete, initErrorHandler);
            return true;
        }
        else if (flashVars.logged_user_id)
        {
            _network = NETWORK_OK;
            isOffline = false;
            isNetwork = true;
            _connector = new OKMediator();
            _connector.init(stage, onComplete, initErrorHandler);
            return true;
        }
        else if (flashVars.vid)
        {
            _network = NETWORK_MM;
            isOffline = false;
            isNetwork = true;
            _connector = new MMMediator();
            _connector.init(stage, onComplete, initErrorHandler);
            return true;
        }
        else
        {
            _network = NETWORK_FB;
            isOffline = false;
            isNetwork = true;
            _connector = new FBMediator();
            _connector.init(stage, onComplete, initErrorHandler);
            return true;
        }

        _network = DEFAULT_NETWORK;
        isOffline = false;
        isNetwork = false;
        _connector = new VKMediator();
        _connector.init(stage, onComplete, initErrorHandler);

        return false;
    }

    private function initErrorHandler():void
    {
        isOffline = true;
        if (_initCallback != null)
            _initCallback();
    }

    public function addEventListener(type:String, listener:Function, useCapture:Boolean = false, priority:int = 0, useWeakReference:Boolean = false):void
    {
        _disptacher.addEventListener(type, listener, useCapture, priority, useWeakReference);
    }

    public function removeEventListener(type:String, listener:Function, useCapture:Boolean = false):void
    {
        _disptacher.removeEventListener(type, listener, useCapture);
    }

    public function hasEventListener(type:String):Boolean
    {
        return _disptacher.hasEventListener(type);
    }

    internal function dispatchEvent(event:APIEvent):void
    {
        _disptacher.dispatchEvent(event);
    }

    public function getUserInfo():ApiUserInfo
    {
        if (isOffline)
            return new ApiUserInfo();

        return _connector.getUserInfo();
    }

    public function getUserId():String
    {
        return _connector.getUserId();
    }

    public function getFriendsList():Array
    {
        if (isOffline)
            return [];

        return _connector.getFriendsList();
    }

    public function getFlashVars():Object
    {
        return _connector.getFlashVars();
    }

    public function showInviteFriendsWindow(onComplete:Function = null, onError:Function = null):void
    {
        _connector.showInviteFriendsWindow(onComplete, onError);
    }

    public function postToWall(title:String, message:String, picUrl:String, linkUrl:String = "", ownerId:String = ""):void
    {
        //TODO: view link URL. It never used.
        _connector.postToWall(title, message, picUrl, ownerId);
    }

    public function transferVotes(money:Number, votes:Number, onComplete:Function = null, onError:Function = null):void
    {
        _connector.transferVotes(money, votes, onComplete, onError);
    }

    public function getTotalFriends(uid:String = "", count:int = 0, offset:int = 0):void
    {
        _connector.getTotalFriends(uid, count, offset);
    }

    public static function get network():String
    {
        return _network;
    }
}
}